apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'        // Allows generation of Eclipse project files
apply plugin: 'fatjar'         // Packages application in single jar with all dependencies included
apply plugin: 'jacoco'         // Unit test coverage report
apply plugin: 'sonar-runner'   // Integration with Sonar for code metrics 
apply plugin: 'project-report' // Report on project dependencies, etc.
apply plugin: 'docker'         // Allows generation of a docker image from the project

version = "1.0-SNAPSHOT"
archivesBaseName = "rest-reference"
description = "Rest Reference Application"
mainClassName = "com.hibu.restreference.SampleApplication"

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext.dockerTag = "hibu/rest-reference"
ext.dockerMaintainer = 'Full User Name "user.name@hibu.com"'

// Dependencies for the build script itself
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2'    
    }
}

// temporarily force jacoco plugin to use a later version of jacoco to work with Java 8. Once the plugin is updated, this should be removed.
jacoco {
    toolVersion = "0.7.1.201405082137"
}

// Dependencies for your application
repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.11"
    compile "io.dropwizard:dropwizard-core:0.7.0"
    compile "io.dropwizard:dropwizard-assets:0.7.0"
    compile "com.wordnik:swagger-jaxrs_2.10:1.3.4"
    compile "com.github.mlaccetti:etcd-client:0.1.1"
}

// Configure docker settings
docker {
    maintainer dockerMaintainer
}

// TASKS

// Run sonar code metrics tool against code base. Note that you will likely need to adapt this to your environment.
//tasks.sonarRunner.dependsOn(jacocoTestReport) // uncomment if you want to force coverage report data to be generated before running sonar
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:9000/"
        property "sonar.jdbc.url", "jdbc:h2:tcp://localhost:9092/sonar"
        //property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
    }
}

// Generate a single jar containing app and all dependencies
fatJar {
	manifest {
        attributes 'Main-Class': mainClassName, "Implementation-Title": description, "Implementation-Version": version
    }
    
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task start(type:Exec,dependsOn:'fatJar') {
	description 'Compiles and runs the server'
	commandLine 'java'
	args '-jar', 'build/libs/' + archivesBaseName + '-' + version + '.jar', 'server', 'src/dist/main/sample-config.yml'
}

// Builds docker config Dockerfile. On Linux it will also generate the final docker image.
distDocker {
    exposePort 8080
    exposePort 8081
    tag dockerTag
}

task configCoreOS(type:Exec) {
    ext.templateFile = file('coreos/user-data.template')
    ext.configFile = file('coreos/user-data.01')
    inputs.files(templateFile)
    outputs.file(configFile)

    description 'Configures the CoreOS cluster (etcd, etc.)'
    commandLine 'coreos/config-user-data.sh'
}

task startCoreOS(type:Exec,dependsOn:'configCoreOS') {
	description 'Starts the CoreOS Server'
	commandLine 'coreos/start.sh'
}

task stopCoreOS(type:Exec) {
	description 'Stops the CoreOS Server'
	workingDir 'coreos'
	commandLine 'vagrant'
	args 'halt'
}

task destroyCoreOS(type:Exec) {
    description 'Delete the CoreOS Servers'
    workingDir 'coreos'
    commandLine './destroy.sh'
}

task deployDocker(type:Exec) {
	description 'Generates the Docker image'
	workingDir 'build/docker'
	commandLine 'docker'
	args 'build', '-t', dockerTag, '.'
}

task tagDocker(type:Exec) {
    description 'Tags the Docker image'
    commandLine 'docker'
    args 'tag', dockerTag, '172.17.8.100:5000/' + dockerTag
}

task pushDocker(type:Exec) {
    description 'Pushes the Docker image to the private registry'
    commandLine 'docker'
    args 'push', '172.17.8.100:5000/' + dockerTag
}

task deployHAProxy(type:Exec) {
    description 'Builds and deploys the HAProxy container'
    workingDir 'docker-haproxy-etcd'
    commandLine './deploy.sh'
}

task deployLogstash(type:Exec) {
    description 'Builds and deploys the Logstash container'
    workingDir 'logstash'
    commandLine './deploy.sh'
}

task updateDockerImages(type:Exec) {
    description 'Have each core pull the latest versions of the images'
    commandLine 'sbin/updateDockerImages.sh'
}

task reapStaleDockerContainers(type:Exec) {
    description 'Remove any docker containers that have exited'
    commandLine 'sbin/reapStaleContainers.sh'
}

task initFleet(type:Exec) {
    description 'Configures fleet'
    workingDir 'fleet'
    commandLine './init.sh'
}

task uninitFleet(type:Exec) {
    description 'Deconfigures fleet'
    workingDir 'fleet'
    workingDir 'fleet'
    commandLine './destroy.sh'
}

task startFleet(type:Exec) {
    description 'Starts the full cluster of docker containers'
    workingDir 'fleet'
    commandLine './start.sh'
}

task stopFleet(type:Exec) {
    description 'Stops the full cluster of docker containers'
    workingDir 'fleet'
    commandLine './stop.sh'
}

task startDemo << {
    configCoreOS.execute()
    startCoreOS.execute()
    deployHAProxy.execute()
    deployLogstash.execute()
    distDocker.execute()
    deployDocker.execute()
    tagDocker.execute()
    pushDocker.execute()
    startFleet.execute()
}
